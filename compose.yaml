# docker compose для запуска модулей приклада и БД + первичная инициализация postgres
services:
  gateway:
    build: gateway
    image: shareit-gateway
    container_name: shareit-gateway
    ports:
      - "8080:8080"
    depends_on:
      - server
    environment:
      - SHAREIT_SERVER_URL=http://server:9090

  server:
    build: server
    image: shareit-server
    container_name: shareit-server
    ports:
      - "9090:9090"
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/shareit
      - SPRING_DATASOURCE_USERNAME=shareit
      - SPRING_DATASOURCE_PASSWORD=shareit

  db:
    image: postgres:16.1
    container_name: postgres
    ports:
      - "6541:5432"
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=shareit_db
      - POSTGRES_USER=RVZ
      - POSTGRES_PASSWORD=7S3d
    healthcheck:
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 10

    # ещё один сервис
  db-init:
    image: postgres:16.1
    container_name: db-init
    # секция для указания зависимостей от других сервисов
    depends_on:
      # указываем, что этот сервис зависит от сервиса с именем db
      db:
        # указываем, что условием запуска будет момент, когда
        # сервис db будет в «здоровом» состоянии
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://dbuser:12345@db:5432/shareit_db -v ON_ERROR_STOP=1 <<-EOSQL
          CREATE TABLE IF NOT EXISTS users (
                      id serial PRIMARY KEY,
                      name varchar(255) NOT NULL,
                      email varchar(512) NOT NULL,
                      UNIQUE (email)
        
          );
          CREATE TABLE IF NOT EXISTS items (
                      id serial PRIMARY KEY,
                      name varchar(512),
                      description varchar(1024),
                      is_available boolean,
                      owner_id bigint REFERENCES users(id)
          );
          CREATE TABLE IF NOT EXISTS bookings (
                      id serial PRIMARY KEY,
                      status varchar(10) NOT NULL,
                      user_id bigint REFERENCES users(id),
                      item_id bigint REFERENCES items(id)
          );
          CREATE TABLE IF NOT EXISTS comments (
                      id serial PRIMARY KEY,
                      text varchar(5000) NOT NULL,
                      created_date timestamp,
                      user_id bigint REFERENCES users(id),
                      item_id bigint REFERENCES items(id)
        
        );
        CREATE TABLE IF NOT EXISTS requests (
                      id serial PRIMARY KEY,
                      description varchar(5000) NOT NULL,
                      is_created boolean,
                      user_id bigint,
                      item_id bigint REFERENCES items(id)
        );